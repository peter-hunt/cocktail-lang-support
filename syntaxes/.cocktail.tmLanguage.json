{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Cocktail",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#storage"
    },
    {
      "include": "#support"
    },
    {
      "include": "#values"
    },
    {
      "include": "#functions"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.cocktail",
          "begin": "#",
          "end": "\n"
        },
        {
          "name": "comment.block.cocktail",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.cocktail",
          "match": "\\b(break|continue|elif|else|for|if|of|while)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.other.cocktail",
          "match": "\\b(in|not)\\b"
        },
        {
          "name": "keyword.operator.cocktail",
          "match": "(\\+|\\-|\\*{1,2}|/{1,2}|%|<{1,2}|>{1,2}|&|\\^|\\||={1,2}|~)=?|[\\+\\-]{2}"
        }
      ]
    },
    "storage": {
      "patterns": [
        {
          "name": "storage.type.function.cocktail",
          "match": "\\b(func)\\b"
        }
      ]
    },
    "support": {
      "patterns": [
        {
          "name": "support.function.cocktail",
          "match": "\\b(exit|input|length|match|print|quit|repr|Boolean|List|Number|String|Tuple)\\b"
        }
      ]
    },
    "values": {
      "patterns": [
        {
          "name": "constant.language.cocktail",
          "match": "\\b(true|false|none)\\b"
        },
        {
          "name": "constant.numeric.cocktail",
          "match": "\\d+(\\.(\\d+)?)?([Ee][+\\-]?\\d+)?|(\\d+)?\\.\\d+([Ee][+\\-]?\\d+)?"
        },
        {
          "name": "string.quoted.double.cocktail",
          "match": "\".*\"",
          "patterns": [
            {
              "name": "constant.character.escape.cocktail",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.regexp.double.cocktail",
          "match": "([Rr])\".*\"",
          "captures": {
            "1": {
              "name": "keyword.other.prefix.cocktail"
            }
          },
          "patterns": [
            {
              "name": "support.constant.cocktail",
              "match": "\\\\[BDSWbdsw]"
            },
            {
              "name": "constant.character.escape.cocktail",
              "match": "\\\\[^BDSWbdsw\n]"
            },
            {
              "name": "constant.character-range.cocktail",
              "match": "\\[.+\\]",
              "patterns": [
                {
                  "name": "constant.character.escape.cocktail",
                  "match": "\\\\."
                }
              ]
            }
          ]
        },
        {
          "name": "string.quoted.single.cocktail",
          "match": "'.*'",
          "patterns": [
            {
              "name": "constant.character.escape.cocktail",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.regexp.single.cocktail",
          "match": "([Rr])'.*'",
          "captures": {
            "1": {
              "name": "keyword.other.prefix.cocktail"
            }
          },
          "patterns": [
            {
              "name": "support.constant.cocktail",
              "match": "\\\\[BDSWbdsw]"
            },
            {
              "name": "constant.character.escape.cocktail",
              "match": "\\\\[^BDSWbdsw]"
            },
            {
              "name": "constant.character-range.cocktail",
              "match": "\\[.+\\]",
              "patterns": [
                {
                  "name": "constant.character.escape.cocktail",
                  "match": "\\\\."
                }
              ]
            }
          ]
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.call.cocktail",
          "begin": "^\\s*([A-Za-z_]\\w*)\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.cocktail"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#storage"
            },
            {
              "include": "#support"
            },
            {
              "include": "#values"
            },
            {
              "include": "#functions"
            }
          ]
        },
        {
          "name": "meta.function.cocktail",
          "begin": "^\\s*(func)\\s+([A-Za-z_]\\w*)\\s*\\(",
          "end": "\\)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.function.cocktail"
            },
            "2": {
              "name": "entity.name.function.cocktail"
            }
          },
          "while": "(((([A-Za-z_]\\w*)(=[\\S\\s]+?)?),|\\/,|\\*,)\\s*)*((([A-Za-z_]\\w*)(=[\\S\\s]+?)?),?|\\/,?|\\*,?)?",
          "whileCaptures": {
            "4": {
              "name": "variable.parameter.cocktail"
            },
            "8": {
              "name": "variable.parameter.cocktail"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#storage"
            },
            {
              "include": "#support"
            },
            {
              "include": "#values"
            },
            {
              "include": "#functions"
            }
          ]
        }
      ]
    }
  },
  "scopeName": "source.cocktail"
}
